cmake_minimum_required(VERSION 3.2)

PROJECT(dmcmake)
INCLUDE(cmake/ModuleImport.cmake)
LIST(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake)
INCLUDE(cmake/ModuleCompileOptions.cmake)
ModuleSetCompileOptions()

SET(DMCMAKE_VERSION_MAJOR "1")
SET(DMCMAKE_VERSION_MINOR "0")
SET(DMCMAKE_VERSION_PATCH "1")
SET(DMCMAKE_VERSION "${DMCMAKE_VERSION_MAJOR}.${DMCMAKE_VERSION_MINOR}.${DMCMAKE_VERSION_PATCH}")

MESSAGE(STATUS "VERSION: ${DMCMAKE_VERSION}")

ADD_DEFINITIONS(-DUSE_DMCMAKE)
ADD_DEFINITIONS(-DLUA_COMPAT_MODULE -DLUA_COMPAT_APIINTCASTS)
OPTION(USE_LUA_INNER "use lua inner" ON)
OPTION(USE_DMCMAKE_TEST "use dmcmake test" ON)

#ModuleImport("dmlog" "thirdparty/dmlog")

IF (WIN32)
    INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/src/windows)
ENDIF(WIN32)

INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/)
INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/include)
INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/src)
INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/src/lua)
INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/src/dmcmake)
INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/test)

LINK_DIRECTORIES(${CMAKE_SOURCE_DIR}/bin)

SET(EXECUTABLE_OUTPUT_PATH ${CMAKE_SOURCE_DIR}/bin)
SET(LIBRARY_OUTPUT_PATH ${CMAKE_SOURCE_DIR}/bin)

IF (USE_DMCMAKE_TEST)
    FILE(GLOB DMLUA_SOURCES
    ${CMAKE_CURRENT_SOURCE_DIR}/src/lua/*.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/src/lua/*.cc
    ${CMAKE_CURRENT_SOURCE_DIR}/src/lua/*.c
    ${CMAKE_CURRENT_SOURCE_DIR}/src/lua/*.hpp
    ${CMAKE_CURRENT_SOURCE_DIR}/src/lua/*.h
    )

    LIST(FILTER DMLUA_SOURCES EXCLUDE REGEX "lua.c$")
    LIST(FILTER DMLUA_SOURCES EXCLUDE REGEX "luac.c$")
    LIST(FILTER DMLUA_SOURCES EXCLUDE REGEX "wmain.c$")

    FILE(GLOB LUA_SOURCES
    ${CMAKE_CURRENT_SOURCE_DIR}/src/lua/lua.c
    )
ENDIF(USE_DMCMAKE_TEST)


FILE(GLOB DMCMAKE_SOURCES
${CMAKE_CURRENT_SOURCE_DIR}/include/*.hpp
${CMAKE_CURRENT_SOURCE_DIR}/include/*.h

${CMAKE_CURRENT_SOURCE_DIR}/src/dmcmake/*.cpp
${CMAKE_CURRENT_SOURCE_DIR}/src/dmcmake/*.cc
${CMAKE_CURRENT_SOURCE_DIR}/src/dmcmake/*.c
${CMAKE_CURRENT_SOURCE_DIR}/src/dmcmake/*.hpp
${CMAKE_CURRENT_SOURCE_DIR}/src/dmcmake/*.h
)

IF (WIN32)
    LIST(APPEND DMCMAKE_SOURCES)
ENDIF(WIN32)

FILE(GLOB_RECURSE DMCMAKETEST_SOURCES
${CMAKE_CURRENT_SOURCE_DIR}/test/*.cpp
${CMAKE_CURRENT_SOURCE_DIR}/test/*.cc
${CMAKE_CURRENT_SOURCE_DIR}/test/*.c
${CMAKE_CURRENT_SOURCE_DIR}/test/*.hpp
${CMAKE_CURRENT_SOURCE_DIR}/test/*.h)

IF (WIN32)
    IF (USE_LUA_INNER)
        ADD_LIBRARY(lua53 SHARED ${DMLUA_SOURCES})
        SET_TARGET_PROPERTIES(lua53 PROPERTIES COMPILE_FLAGS "-DLUA_BUILD_AS_DLL -DLUA_CORE")
        
        ADD_EXECUTABLE(lua ${LUA_SOURCES})
        TARGET_LINK_LIBRARIES(lua lua53)
    ENDIF(USE_LUA_INNER)

    ADD_LIBRARY(dmcmake SHARED ${DMCMAKE_SOURCES} ${CMAKE_CURRENT_SOURCE_DIR}/src/dmcmake/dmcmake_module.def)
    TARGET_LINK_LIBRARIES(dmcmake lua53)

    SET_TARGET_PROPERTIES(dmcmake PROPERTIES COMPILE_FLAGS "-DLUA_BUILD_AS_DLL -DLUA_LIB")

    IF (USE_DMCMAKE_TEST)
        ADD_EXECUTABLE(dmcmaketest ${DMCMAKETEST_SOURCES})
        TARGET_LINK_LIBRARIES(dmcmaketest dmcmake)
        SET_TARGET_PROPERTIES(dmcmaketest PROPERTIES COMPILE_FLAGS "-DLUA_BUILD_AS_DLL")
    ENDIF(USE_DMCMAKE_TEST)

ELSEIF (APPLE)
    ADD_DEFINITIONS(-DLUA_USE_MACOSX)
    IF (USE_LUA_INNER)
        ADD_LIBRARY(lua53 SHARED ${DMLUA_SOURCES})
        SET_TARGET_PROPERTIES(lua53 PROPERTIES COMPILE_FLAGS "-Wl,-E" )

        ADD_EXECUTABLE(lua ${LUA_SOURCES})
        TARGET_LINK_LIBRARIES(lua lua53 dl)
    ENDIF(USE_LUA_INNER)

    ADD_LIBRARY(dmcmake SHARED ${DMCMAKE_SOURCES})
    SET_TARGET_PROPERTIES(dmcmake PROPERTIES COMPILE_FLAGS "-Wl,-E" )
    SET_TARGET_PROPERTIES(dmcmake PROPERTIES PREFIX "")

    TARGET_LINK_LIBRARIES(dmcmake lua53)

    IF (USE_DMCMAKE_TEST)
        ADD_EXECUTABLE(dmcmaketest ${DMCMAKETEST_SOURCES})
        TARGET_LINK_LIBRARIES(dmcmaketest dmcmake)
    ENDIF(USE_DMCMAKE_TEST)   
ELSEIF (UNIX)
    ADD_DEFINITIONS(-DLUA_USE_LINUX)

    IF (USE_LUA_INNER)
        ADD_LIBRARY(lua53 SHARED ${DMLUA_SOURCES})
        SET_TARGET_PROPERTIES(lua53 PROPERTIES COMPILE_FLAGS "-Wl,-E" )

        ADD_EXECUTABLE(lua ${LUA_SOURCES})
        TARGET_LINK_LIBRARIES(lua lua53 m dl)
    ENDIF(USE_LUA_INNER)

    ADD_LIBRARY(dmcmake SHARED ${DMCMAKE_SOURCES})
    SET_TARGET_PROPERTIES(dmcmake PROPERTIES COMPILE_FLAGS "-Wl,-E" )
    SET_TARGET_PROPERTIES(dmcmake PROPERTIES PREFIX "")
    TARGET_LINK_LIBRARIES(dmcmake lua53)
    
    IF (USE_DMCMAKE_TEST)
        ADD_EXECUTABLE(dmcmaketest ${DMCMAKETEST_SOURCES})
        TARGET_LINK_LIBRARIES(dmcmaketest dmcmake)
    ENDIF(USE_DMCMAKE_TEST)   
ENDIF ()

#ADD_CUSTOM_COMMAND(
#TARGET dmcmaketest
#PRE_BUILD
#COMMAND ${CMAKE_COMMAND} -E copy_if_different
#${CMAKE_CURRENT_SOURCE_DIR}/config/test.csv
#$<TARGET_FILE_DIR:dmcmaketest>
#)

#INSTALL(DIRECTORY include/ DESTINATION include)
#INSTALL(TARGETS dmcmake
#        RUNTIME DESTINATION bin
#        LIBRARY DESTINATION lib
#        ARCHIVE DESTINATION lib)

#SET(DMCMAKE_LIBS "dmcmake")
#MARK_AS_ADVANCED(${DMCMAKE_LIBS})
